'use strict';

///////////////////////
class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10);
  clicks = 0;
  constructor(coords, distance, duration) {
    this.coords = coords; // [lat,lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }
  _setDescription() {
    // prettier-ignore
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    return (this.description = `${
      this.type[0].toUpperCase() + this.type.slice(1)
    } on ${months[this.date.getMonth()]} ${this.date.getDate()}`);
  }
  click() {
    this.clicks++;
  }
}

class Running extends Workout {
  type = `running`;
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace();
    this._setDescription();
  }
  calcPace() {
    // min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}
class Cycling extends Workout {
  type = `cycling`;
  constructor(coords, distance, duration, elevetionGain) {
    super(coords, distance, duration);
    this.elevetionGain = elevetionGain;
    this.calcSpeed();
    this._setDescription();
  }
  calcSpeed() {
    // km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

/////////////////////////////
// APPLICATION ARCHITECTURE
const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

class App {
  #map;
  #mapZoomLevel = 13;
  #mapEvent;
  #workouts = [];
  constructor() {
    this._getPosition();
    //local Storage
    this._getLocalStorage();
    // EventHandlers
    form.addEventListener('submit', this._newWorkout.bind(this));
    // –ø—Ä–∏ –∏–∑–º–∏–Ω–µ–Ω–∏–∏ option –≤ —ç–ª–µ–º–µ–Ω—Ç–µ select –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    inputType.addEventListener('change', this._toggleElevationField);
    // —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –øo –∫–ª–∏–∫—É –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º workout –≤ –ª–∏—Å—Ç–µ
    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));
  }
  _getPosition() {
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
    if (navigator.geolocation) {
      // –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —É user
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          // –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∫–± —Ñ—É–Ω–∫—Ü–∏—é —Å –±–∏–Ω–¥–æ–º this, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é _loadMap –≤—ã–∑–æ–≤–µ—Ç—Å—è –Ω–µ –∫–∞–∫ –º–µ—Ç–æ–¥, –∞ –∫–∞–∫ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ—ç—Ç–æ–º—É this  –±—É–¥–µ—Ç undefined
          alert('Your location is not defined');
        }
      );
    }
  }
  _loadMap(position) {
    const { latitude } = position.coords; // —Ç–æ–∂–µ —Å–∞–º–æ–µ --> const latitude = position.coords.latitude;
    const { longitude } = position.coords;
    const coords = [latitude, longitude];

    // –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç—ã –≤ div —Å id map —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ leafletjs
    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);

    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
    }).addTo(this.#map);
    // –∞–Ω–∞–ª–æ–≥ addEventListener –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ leafletjs
    // handling clicks on map
    this.#map.on('click', this._showForm.bind(this));

    // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–∞–¥–∂, –µ—Å–ª–∏ –µ—Å—Ç—å
    this.#workouts.forEach(work => {
      this._renderWorkoutMarker(work);
    });
  }
  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove('hidden'); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç—É
    inputDistance.focus(); // —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω–æ–º –∏–Ω–ø—É—Ç–µ}
  }
  _hideForm() {
    form.style.display = 'none';
    form.classList.add('hidden');
    setTimeout(() => (form.style.display = 'grid'), 1000);
    // —á–∏—Å—Ç–∏–º –∏–Ω–ø—É—Ç—ã
    inputCadence.value =
      inputDistance.value =
      inputDuration.value =
      inputElevation.value =
        '';
  }
  _toggleElevationField() {
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden'); // closest() method - is like reverse querySelector
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  }
  _newWorkout(e) {
    // —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —á—Ç–æ –±—ã –±—ã–ª —á–∏—Å–ª–æ–º
    const validInputs = (...inputs) =>
      inputs.every(inp => Number.isFinite(inp));
    const allPositive = (...inputs) => inputs.every(inp => inp > 0);
    e.preventDefault();

    // –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–æ—Ä–º—ã
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;

    // –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±–µ–≥ - —Å–æ–∑–¥–∞—Ç—å –æ–±—å–µ–∫—Ç running
    if (type === 'running') {
      const cadence = +inputCadence.value;
      // –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (
        // !Number.isFinite(cadence) ||
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration)
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      )
        return alert(`Inputs have to be positive numbers!`);

      workout = new Running([lat, lng], distance, duration, cadence);
    }
    // –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ cycling - —Å–æ–∑–¥–∞—Ç—å –æ–±—å–µ–∫—Ç cycling
    if (type === 'cycling') {
      const elevetion = +inputElevation.value;
      // –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (
        !validInputs(distance, duration, elevetion) ||
        !allPositive(distance, duration)
      )
        return alert(`Inputs have to be positive numbers!`);
      workout = new Cycling([lat, lng], distance, duration, elevetion);
    }
    // –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—å–µ–∫—Ç –≤ workout array
    this.#workouts.push(workout);

    // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ –∫–∞–∫ –º–∞—Ä–∫–µ—Ä
    this._renderWorkoutMarker(workout);

    // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Å–ø–∏—Å–∫–µ
    this._renderWorkout(workout);

    // –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å local storage –≤—Å–µ–º workout-–∞–º
    this._setLocalStorage();
  }
  _renderWorkoutMarker(workout) {
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(
        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`
      )
      .openPopup();
  }
  _renderWorkout(workout) {
    let html = `
          <li class="workout workout--${workout.type}" data-id=${workout.id}>
            <h2 class="workout__title">${workout.description}</h2>
            <div class="workout__details">
              <span class="workout__icon">${
                workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'
              }</span>
              <span class="workout__value">${workout.distance}</span>
              <span class="workout__unit">km</span>
             </div>
            <div class="workout__details">
              <span class="workout__icon">‚è±</span>
              <span class="workout__value">${workout.duration}</span>
              <span class="workout__unit">min</span>
            </div>
    `;
    if (workout.type === 'running') {
      html += `
          <div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.pace.toFixed(1)}</span>
            <span class="workout__unit">min/km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">${workout.cadence}</span>
            <span class="workout__unit">spm</span>
          </div>
        </li>
      `;
    }
    if (workout.type === 'cycling') {
      html += `
        <div class="workout__details">
          <span class="workout__icon">‚ö°Ô∏è</span>
          <span class="workout__value">${workout.speed.toFixed(1)}</span>
          <span class="workout__unit">km/h</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">‚õ∞</span>
          <span class="workout__value">${workout.elevetionGain}</span>
          <span class="workout__unit">m</span>
        </div>
      </li>
      `;
    }
    form.insertAdjacentHTML('afterend', html);
    // –°–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –∏–Ω–ø—É—Ç–∞:
    this._hideForm();
  }
  _moveToPopup(e) {
    const workoutEl = e.target.closest('.workout');
    if (!workoutEl) return; // guard

    const workout = this.#workouts.find(
      work => work.id === workoutEl.dataset.id
    );
    // console.log(workout);
    // –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—à–µ–π –∫–∞—Ä—Ç–µ
    this.#map.setView(workout.coords, this.#mapZoomLevel, {
      animate: true,
      pan: {
        duration: 1,
      },
    });
    // Using API
    // workout.click(); - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç prototype inheritence –Ω–æ–≤—ã—Ö –æ–±—å–∫—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –∑–∞—Ö–æ—á—É —á—Ç–æ –±—ã —Ä–∞–±–æ—Ç–∞–ª–æ - –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –æ–±—å–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–∞–¥–∂. –ü–æ—ç—Ç–æ–º—É –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–∞–¥–∂ –ø–ª–æ—Ö
  }
  _setLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this.#workouts)); // –æ–±—å–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É
  }
  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem('workouts')); // –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—å–µ–∫—Ç
    if (!data) return;
    this.#workouts = data;
    this.#workouts.forEach(work => {
      this._renderWorkout(work);
    });
  }
  remove() {
    localStorage.removeItem('workouts'); // —É–¥–∞–ª—è–µ–º –≤—Å—ë –∏–∑ –ª–æ–∫–∞–ª —Å—Ç–æ—Ä–∞–¥–∂
    location.reload(); // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  }
}
// –î–µ–ª–∞–µ–º –æ–±—å–µ–∫—Ç –∏–∑ –∫–ª–∞—Å—Å–∞ App
const app = new App();
